import{_ as a,o as s,c as e,R as n}from"./chunks/framework.knLoFo0c.js";const E=JSON.parse('{"title":"Java Variables","description":"","frontmatter":{},"headers":[],"relativePath":"java/java-variables.md","filePath":"java/java-variables.md"}'),l={name:"java/java-variables.md"},o=n(`<h1 id="java-variables" tabindex="-1">Java Variables <a class="header-anchor" href="#java-variables" aria-label="Permalink to &quot;Java Variables&quot;">​</a></h1><p>Variables are containers for storing data values. In Java, there are different types of variables, for example:</p><h2 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h2><p>Stores text, such as &quot;Hello&quot;. String values are surrounded by double quotes.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String greeting </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(greeting); </span><span style="color:#6A737D;">// Outputs &quot;Hello&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String greeting </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(greeting); </span><span style="color:#6A737D;">// Outputs &quot;Hello&quot;</span></span></code></pre></div><h2 id="int" tabindex="-1">int <a class="header-anchor" href="#int" aria-label="Permalink to &quot;int&quot;">​</a></h2><p>Stores integers (whole numbers), without decimals, such as 123 or -123.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> myNum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(myNum); </span><span style="color:#6A737D;">// Outputs 15</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> myNum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(myNum); </span><span style="color:#6A737D;">// Outputs 15</span></span></code></pre></div><h2 id="float" tabindex="-1">float <a class="header-anchor" href="#float" aria-label="Permalink to &quot;float&quot;">​</a></h2><p>Stores floating point numbers, with decimals, such as 19.99 or -19.99.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> myFloatNum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5.99f</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(myFloatNum); </span><span style="color:#6A737D;">// Outputs 5.99</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> myFloatNum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5.99f</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(myFloatNum); </span><span style="color:#6A737D;">// Outputs 5.99</span></span></code></pre></div><h2 id="char" tabindex="-1">char <a class="header-anchor" href="#char" aria-label="Permalink to &quot;char&quot;">​</a></h2><p>Stores single characters, such as &#39;a&#39; or &#39;B&#39;. Char values are surrounded by single quotes.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> myLetter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;D&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(myLetter); </span><span style="color:#6A737D;">// Outputs D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> myLetter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;D&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(myLetter); </span><span style="color:#6A737D;">// Outputs D</span></span></code></pre></div><h2 id="boolean" tabindex="-1">boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to &quot;boolean&quot;">​</a></h2><p>Stores values with two states: true or false.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> myBool </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(myBool); </span><span style="color:#6A737D;">// Outputs true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> myBool </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(myBool); </span><span style="color:#6A737D;">// Outputs true</span></span></code></pre></div><h2 id="byte" tabindex="-1">byte <a class="header-anchor" href="#byte" aria-label="Permalink to &quot;byte&quot;">​</a></h2><p>Stores whole numbers from -128 to 127.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> myByte </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(myByte); </span><span style="color:#6A737D;">// Outputs 100</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> myByte </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(myByte); </span><span style="color:#6A737D;">// Outputs 100</span></span></code></pre></div><h2 id="short" tabindex="-1">short <a class="header-anchor" href="#short" aria-label="Permalink to &quot;short&quot;">​</a></h2><p>Stores whole numbers from -32768 to 32767.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">short</span><span style="color:#E1E4E8;"> myShort </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(myShort); </span><span style="color:#6A737D;">// Outputs 5000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">short</span><span style="color:#24292E;"> myShort </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(myShort); </span><span style="color:#6A737D;">// Outputs 5000</span></span></code></pre></div><h2 id="long" tabindex="-1">long <a class="header-anchor" href="#long" aria-label="Permalink to &quot;long&quot;">​</a></h2><p>Stores whole numbers from -9223372036854775808 to 9223372036854775807.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> myLong </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15000000000L</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(myLong); </span><span style="color:#6A737D;">// Outputs 15000000000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> myLong </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15000000000L</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(myLong); </span><span style="color:#6A737D;">// Outputs 15000000000</span></span></code></pre></div><h2 id="double" tabindex="-1">double <a class="header-anchor" href="#double" aria-label="Permalink to &quot;double&quot;">​</a></h2><p>Stores floating point numbers, with decimals, such as 19.99 or -19.99 (note the double use of the decimal point).</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> myDouble </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">19.99d</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(myDouble); </span><span style="color:#6A737D;">// Outputs 19.99</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> myDouble </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">19.99d</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(myDouble); </span><span style="color:#6A737D;">// Outputs 19.99</span></span></code></pre></div><h2 id="java-identifiers" tabindex="-1">Java Identifiers <a class="header-anchor" href="#java-identifiers" aria-label="Permalink to &quot;Java Identifiers&quot;">​</a></h2><p>All Java variables must be identified with unique names. These unique names are called identifiers.</p><h3 id="identifiers-can-be-short-names-like-x-and-y-or-more-descriptive-names-age-sum-totalvolume" tabindex="-1">Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume). <a class="header-anchor" href="#identifiers-can-be-short-names-like-x-and-y-or-more-descriptive-names-age-sum-totalvolume" aria-label="Permalink to &quot;Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).&quot;">​</a></h3><h3 id="note-it-is-recommended-to-use-descriptive-names-in-order-to-create-understandable-and-maintainable-code" tabindex="-1">Note: It is recommended to use descriptive names in order to create understandable and maintainable code: <a class="header-anchor" href="#note-it-is-recommended-to-use-descriptive-names-in-order-to-create-understandable-and-maintainable-code" aria-label="Permalink to &quot;Note: It is recommended to use descriptive names in order to create understandable and maintainable code:&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Good</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> minutesPerHour </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// OK, but not so easy to understand what m actually is</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Good</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> minutesPerHour </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// OK, but not so easy to understand what m actually is</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="java-identifiers-rules" tabindex="-1">Java Identifiers - Rules <a class="header-anchor" href="#java-identifiers-rules" aria-label="Permalink to &quot;Java Identifiers - Rules&quot;">​</a></h3><ul><li>All identifiers should begin with a letter (A to Z or a to z), currency character ($) or an underscore (_).</li><li>After the first character, identifiers can have any combination of characters.</li><li>A key word cannot be used as an identifier.</li><li>Most importantly, identifiers are case sensitive.</li><li>Examples of legal identifiers: age, $salary, _value, __1_value.</li><li>Examples of illegal identifiers: 123abc, -salary.</li></ul><h3 id="java-identifiers-conventions" tabindex="-1">Java Identifiers - Conventions <a class="header-anchor" href="#java-identifiers-conventions" aria-label="Permalink to &quot;Java Identifiers - Conventions&quot;">​</a></h3><ul><li>Class names should start with an upper case letter. All other words should have their first letter in upper case. (camelCase)</li><li>If the name consists of more than one word, camelCase is recommended.</li><li>Examples: class MyClass, int myNum, String firstName, void main(), etc.</li></ul><h3 id="java-variables-1" tabindex="-1">Java Variables <a class="header-anchor" href="#java-variables-1" aria-label="Permalink to &quot;Java Variables&quot;">​</a></h3><p>A variable is a container which holds the value while the Java program is executed. A variable is assigned with a data type.</p><h3 id="variable-types" tabindex="-1">Variable Types <a class="header-anchor" href="#variable-types" aria-label="Permalink to &quot;Variable Types&quot;">​</a></h3><ul><li>Local Variables</li><li>Class Variables (Static Variables)</li><li>Instance Variables (Non-static Variables)</li></ul><h3 id="local-variables" tabindex="-1">Local Variables <a class="header-anchor" href="#local-variables" aria-label="Permalink to &quot;Local Variables&quot;">​</a></h3><p>A variable declared inside the body of the method is called local variable. You can use this variable only within that method and the other methods in the class aren&#39;t even aware that the variable exists.</p><p>A local variable cannot be defined with &quot;static&quot; keyword.</p><h3 id="class-variables-static-variables" tabindex="-1">Class Variables (Static Variables) <a class="header-anchor" href="#class-variables-static-variables" aria-label="Permalink to &quot;Class Variables (Static Variables)&quot;">​</a></h3><p>A variable declared within the class with static keyword, is called static variable. It cannot be local. You can create a single copy of static variable and share among all the instances of the class. Memory allocation for static variable happens only once when the class is loaded in the memory.</p><h3 id="instance-variables-non-static-variables" tabindex="-1">Instance Variables (Non-static Variables) <a class="header-anchor" href="#instance-variables-non-static-variables" aria-label="Permalink to &quot;Instance Variables (Non-static Variables)&quot;">​</a></h3><p>A variable declared within the class but outside the body of the method, is called instance variable. It is not declared as static. It is called instance variable because its value is instance specific and is not shared among instances.</p>`,49),t=[o];function p(r,i,c,d,y,h){return s(),e("div",null,t)}const b=a(l,[["render",p]]);export{E as __pageData,b as default};
